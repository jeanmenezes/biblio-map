VIISUALIZATION

A Tour through the Visualization Zoo
A survey of powerful visualization techniques, from the obvious to the obscure
Jeﬀrey Heer, Michael Bostock, and Vadim Ogievetsky, Stanford University
Thanks to advances in sensing, networking, and data management, our society is producing digital
information at an astonishing rate. According to one estimate, in 2010 alone we will generate 1,200
exabytes—60 million times the content of the Library of Congress. Within this deluge of data lies a
wealth of valuable information on how we conduct our businesses, governments, and personal lives.
To put the information to good use, we must ﬁnd ways to explore, relate, and communicate the data
meaningfully.
The goal of visualization is to aid our understanding of data by leveraging the human visual
system’s highly tuned ability to see patterns, spot trends, and identify outliers. Well-designed visual
representations can replace cognitive calculations with simple perceptual inferences and improve
comprehension, memory, and decision making. By making data more accessible and appealing,
visual representations may also help engage more diverse audiences in exploration and analysis. The
challenge is to create effective and engaging visualizations that are appropriate to the data.
Creating a visualization requires a number of nuanced judgments. One must determine which
questions to ask, identify the appropriate data, and select effective visual encodings to map data values
to graphical features such as position, size, shape, and color. The challenge is that for any given
data set the number of visual encodings—and thus the space of possible visualization designs—is
extremely large. To guide this process, computer scientists, psychologists, and statisticians have
studied how well different encodings facilitate the comprehension of data types such as numbers,
categories, and networks. For example, graphical perception experiments ﬁnd that spatial position (as
in a scatter plot or bar chart) leads to the most accurate decoding of numerical data and is generally
preferable to visual variables such as angle, one-dimensional length, two-dimensional area, threedimensional volume, and color saturation. Thus, it should be no surprise that the most common
data graphics, including bar charts, line charts, and scatter plots, use position encodings. Our
understanding of graphical perception remains incomplete, however, and must appropriately be
balanced with interaction design and aesthetics.
This article provides a brief tour through the “visualization zoo,” showcasing techniques for
visualizing and interacting with diverse data sets. In many situations, simple data graphics will
not only sufﬁce, they may also be preferable. Here we focus on a few of the more sophisticated
and unusual techniques that deal with complex data sets. After all, you don’t go to the zoo to see
Chihuahuas and raccoons; you go to admire the majestic polar bear, the graceful zebra, and the
terrifying Sumatran tiger. Analogously, we cover some of the more exotic (but practically useful!)
forms of visual data representation, starting with one of the most common, time-series data;
continuing on to statistical data and maps; and then completing the tour with hierarchies and
networks. Along the way, bear in mind that all visualizations share a common “DNA”—a set of
mappings between data properties and visual attributes such as position, size, shape, and color—and

1

VIISUALIZATION

that customized species of visualization might always be constructed by varying these encodings.
Most of the visualizations shown here are accompanied by interactive examples. The live
examples were created using Protovis (http://vis.stanford.edu/protovis/), an open source language
for Web-based data visualization. To learn more about how a visualization was made (or to copy and
paste it for your own use), simply “View Source” on the page. All example source code is released
into the public domain and has no restrictions on reuse or modiﬁcation. Note, however, that these
examples will work only on a modern, standards-compliant browser supporting SVG (scalable
vector graphics ). Supported browsers include recent versions of Firefox, Safari, Chrome, and Opera.
Unfortunately, Internet Explorer 8 and earlier versions do not support SVG and so cannot be used to
view the interactive examples.

TIME-SERIES DATA
Time-series data—sets of values changing over time—is one of the most common forms of recorded
data. Time-varying phenomena are central to many domains such as ﬁnance (stock prices, exchange
rates), science (temperatures, pollution levels, electric potentials), and public policy (crime rates).
One often needs to compare a large number of time series simultaneously and can choose from a
number of visualizations to do so.

Index Chart of Selected Technology Stocks, 2000-2010

5.0x

AAPL

Gain / Loss Factor

4.0x

3.0x

2.0x

AMZN
GOOG

1.0x
IBM

MSFT
S&P 500

0.0x

-1.0x

Jan 2005

Source: Yahoo! Finance; http://hci.stanford.edu/jheer/files/zoo/ex/time/index-chart.html

2

VIISUALIZATION

INDEX CHARTS
With some forms of time-series data, raw values are less important than relative changes. Consider
investors who are more interested in a stock’s growth rate than its speciﬁc price. Multiple stocks may
have dramatically different baseline prices but may be meaningfully compared when normalized.
An index chart is an interactive line chart that shows percentage changes for a collection of timeseries data based on a selected index point. For example, the image in ﬁgure 1A shows the percentage
change of selected stock prices if purchased in January 2005: one can see the rocky rise enjoyed by
those who invested in Amazon, Apple, or Google at that time.
STACKED GRAPHS
Other forms of time-series data may be better seen in aggregate. By stacking area charts on top of
each other, we arrive at a visual summation of time-series values—a stacked graph. This type of graph
(sometimes called a stream graph) depicts aggregate patterns and often supports drill-down into a
subset of individual series. The chart in ﬁgure 1B shows the number of unemployed workers in the
United States over the past decade, subdivided by industry. While such charts have proven popular
in recent years, they do have some notable limitations. A stacked graph does not support negative
numbers and is meaningless for data that should not be summed (temperatures, for example).

Stacked Graph of Unemployed U.S. Workers by Industry, 2000-2010

Agriculture
Business services

Construction

Education and Health
Finance
Government
Information

Leisure and hospitality

Manufacturing
Mining and Extraction
Other
Self-employed
Transportation and Utilities
Wholesale and Retail Trade

2000

2001

2002

2003

2004

2005

2006

2007

2008

2009

2010

Source: U.S. Bureau of Labor Statistics
http://hci.stanford.edu/jheer/files/zoo/ex/time/stack.html

3

VIISUALIZATION

Moreover, stacking may make it difﬁcult to accurately interpret trends that lie atop other curves.
Interactive search and ﬁltering is often used to compensate for this problem.
SMALL MULTIPLES
In lieu of stacking, multiple time series can be plotted within the same axes, as in the index chart.
Placing multiple series in the same space may produce overlapping curves that reduce legibility,
however. An alternative approach is to use small multiples: showing each series in its own chart. In
ﬁgure 1C we again see the number of unemployed workers, but normalized within each industry
category. We can now more accurately see both overall trends and seasonal patterns in each sector.
While we are considering time-series data, note that small multiples can be constructed for just
about any type of visualization: bar charts, pie charts, maps, etc. This often produces a more
effective visualization than trying to coerce all the data into a single plot.
HORIZON GRAPHS
What happens when you want to compare even more time series at once? The horizon graph is a
technique for increasing the data density of a time-series view while preserving resolution. Consider
the four graphs shown in ﬁgure 1D. The ﬁrst one is a standard area chart, with positive values
colored blue and negative values colored red. The second graph “mirrors” negative values into the
same region as positive values, doubling the data density of the area chart. The third chart—a

Small Multiples of Unemployed U.S. Workers Normalized by Industry, 2000-2010

Self-employed

Agriculture

Other

Leisure and hospitality

Education and Health

Business services

Finance

Information

Transportation and Utilities

Wholesale and Retail Trade

Manufacturing

Construction

Mining and Extraction

Government

Source: U.S. Bureau of Labor Statistics
http://hci.stanford.edu/jheer/files/zoo/ex/time/multiples.html

4

VIISUALIZATION

horizon graph—doubles the data density yet again by dividing the graph into bands and layering
them to create a nested form. The result is a chart that preserves data resolution but uses only a
quarter of the space. Although the horizon graph takes some time to learn, it has been found to be
more effective than the standard plot when the chart sizes get quite small.

STATISTICAL DISTRIBUTIONS
Other visualizations have been designed to reveal how a set of numbers is distributed and thus help
an analyst better understand the statistical properties of the data. Analysts often want to ﬁt their
data to statistical models, either to test hypotheses or predict future values, but an improper choice
of model can lead to faulty predictions. Thus, one important use of visualizations is exploratory data
analysis: gaining insight into how data is distributed to inform data transformation and modeling
decisions. Common techniques include the histogram, which shows the prevalence of values grouped
into bins, and the box-and-whisker plot, which can convey statistical features such as the mean,
median, quartile boundaries, or extreme outliers. In addition, a number of other techniques exist for
assessing a distribution and examining interactions between multiple dimensions.

Horizon Graphs of U.S. Unemployment Rate, 2000-2010

Source: U.S. Bureau of Labor Statistics
http://hci.stanford.edu/jheer/files/zoo/ex/time/horizon.html

5

VIISUALIZATION

STEM-AND-LEAF PLOTS
For assessing a collection of numbers, one alternative to the histogram is the stem-and-leaf plot. It
typically bins numbers according to the ﬁrst signiﬁcant digit, and then stacks the values within each
bin by the second signiﬁcant digit. This minimalistic representation uses the data itself to paint a

Stem-and-Leaf Plot of Mechanical Turk Participation Rates
0

1 1 1 2 2 2 2 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 5 6 7 8 8 8 8 8 8 9

1

0 0 0 0 1 1 1 1 2 2 3 3 3 3 4 4 4 4 5 5 6 7 7 8 9 9 9 9 9

2

0 0 1 1 1 5 7 8 9

3

0 0 1 2 3 3 3 4 6 6 8 8

4

0 0 1 1 1 1 3 3 4 5 5 5 6 7 8 9

5

0 2 3 5 6 7 7 7 9

6

1 2 6 7 8 9 9 9

7

0 0 0 1 6 7 9

8

0 0 1 2 3 4 4 4 4 4 4 4 5 6 7 7 7 9

9

1 3 3 5 7 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9

10

0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
Source: Stanford Visualization Group
http://hci.stanford.edu/jheer/files/zoo/ex/stats/stem-and-leaf.html

Turker Task Group Completion %

Q-Q Plots of Mechanical Turk Participation Rates

100%

50%

0%

0%

50%

100%

Uniform Distribution

0%

50%

100%

Gaussian Distribution

0%

50%

100%

Fitted Mixture of 3 Gaussians

Source: Stanford Visualization Group
http://hci.stanford.edu/jheer/files/zoo/ex/stats/qqplot.html

6

VIISUALIZATION

frequency distribution, replacing the “information-empty” bars of a traditional histogram bar chart
and allowing one to assess both the overall distribution and the contents of each bin. In ﬁgure 2A,
the stem-and-leaf plot shows the distribution of completion rates of workers completing crowdsourced tasks on Amazon’s Mechanical Turk. Note the multiple clusters: one group clusters around
high levels of completion (99-100 percent); at the other extreme is a cluster of Turkers who complete
only a few tasks (~10 percent) in a group.

Scatter Plot Matrix of Automobile Data

0

40

0

30

0

0

20

10

20

15

10

00

50

00

40

00

30

00

20

200
150

horsepower

100
50
5000

5000

4000

4000

weight

3000

3000
2000

2000

20

20

acceleration

15

15
10

10
400
300

displacement

200
100

20

15

10

European Union

00
50

00
40

00
30

00
20

0
20

0
15

0
10

50

United States

Japan

Source: GGobi
http://hci.stanford.edu/jheer/files/zoo/ex/stats/splom.html

7

VIISUALIZATION

Q-Q PLOTS
Though the histogram and the stem-and-leaf plot are common tools for assessing a frequency
distribution, the Q-Q (quantile-quantile) plot is a more powerful tool. The Q-Q plot compares two
probability distributions by graphing their quantiles (http://en.wikipedia.org/wiki/Quantile) against
each other. If the two are similar, the plotted values will lie roughly along the central diagonal. If the
two are linearly related, values will again lie along a line, though with varying slope and intercept.
Figure 2B shows the same Mechanical Turk participation data compared with three statistical
distributions. Note how the data forms three distinct components when compared with uniform
and normal (Gaussian) distributions: this suggests that a statistical model with three components
might be more appropriate, and indeed we see in the ﬁnal plot that a ﬁtted mixture of three normal
distributions provides a better ﬁt. Though powerful, the Q-Q plot has one obvious limitation in that
its effective use requires that viewers possess some statistical knowledge.
SPLOM (SCATTER PLOT MATRIX)
Other visualization techniques attempt to represent the relationships among multiple variables.
Multivariate data occurs frequently and is notoriously hard to represent, in part because of the
difﬁculty of mentally picturing data in more than three dimensions. One technique to overcome
this problem is to use small multiples of scatter plots showing a set of pairwise relations among
variables, thus creating the SPLOM (scatter plot matrix). A SPLOM enables visual inspection of
correlations between any pair of variables.

Parallel Coordinates of Automobile Data
cylinders
8

displacement
455 cubic inch

weight
5140 lbs

horsepower
230 hp

acceleration
25 (0 to 60mph)

mpg
47 miles/gallon

year
82

3

68 cubic inch

1613 lbs

46 hp

8 (0 to 60mph)

9 miles/gallon

70

Source: GGobi
http://hci.stanford.edu/jheer/files/zoo/ex/stats/parallel.html

8

VIISUALIZATION

In ﬁgure 2C a scatter plot matrix is used to visualize the attributes of a database of automobiles,
showing the relationships among horsepower, weight, acceleration, and displacement. Additionally,
interaction techniques such as brushing-and-linking—in which a selection of points on one graph
highlights the same points on all the other graphs—can be used to explore patterns within the data.
PARALLEL COORDINATES
Parallel coordinates (||-coord), shown in ﬁgure 2D, take a different approach to visualizing
multivariate data. Instead of graphing every pair of variables in two dimensions, we repeatedly plot
the data on parallel axes and then connect the corresponding points with lines. Each poly-line
represents a single row in the database, and line crossings between dimensions often indicate inverse
correlation. Reordering dimensions can aid pattern ﬁnding, as can interactive querying to ﬁlter
along one or more dimensions. Another advantage of parallel coordinates is that they are relatively
compact, so many variables can be shown simultaneously.

MAPS
Although a map may seem a natural way to visualize geographical data, it has a long and rich history
of design. Many maps are based upon a cartographic projection: a mathematical function that maps
the three-dimensional geometry of the Earth to a two-dimensional image. Other maps knowingly
distort or abstract geographic features to tell a richer story or highlight speciﬁc data.

Flow Map of Napoleon’s March on Moscow

Map data ©2010 Geocentre Consulting, PPWK, Tele Atlas -

07 Dec

01 Dec
06 Dec

24 Nov
28 Nov

09 Nov
14 Nov

24 Oct

18 Oct

0°
-10°
-20°
-30°

Based on the Work of Charles Minard
http://hci.stanford.edu/jheer/files/zoo/ex/maps/napoleon.html

9

VIISUALIZATION

FLOW MAPS
By placing stroked lines on top of a geographic map, a ﬂow map can depict the movement of a
quantity in space and (implicitly) in time. Flow lines typically encode a large amount of multivariate
information: path points, direction, line thickness, and color can all be used to present dimensions
of information to the viewer. Figure 3A is a modern interpretation of Charles Minard’s depiction of
Napoleon’s ill-fated march on Moscow. Many of the greatest ﬂow maps also involve subtle uses of
distortion, as geography is modiﬁed to accommodate or highlight ﬂows.
CHOROPLETH MAPS
Data is often collected and aggregated by geographical areas such as states. A standard approach to
communicating this data is to use a color encoding of the geographic area, resulting in a choropleth
map. Figure 3B uses a color encoding to communicate the prevalence of obesity in each state in the
U.S. Though this is a widely used visualization technique, it requires some care. One common error
is to encode raw data values (such as population) rather than using normalized values to produce a
density map. Another issue is that one’s perception of the shaded value can also be affected by the
underlying area of the geographic region.
GRADUATED SYMBOL MAPS
An alternative to the choropleth map is the graduated symbol map, which places symbols over an
underlying map. This approach avoids confounding geographic area with data values and allows for

Choropleth Map of Obesity in the U.S., 2008

WA

ND

MT

MN

IL
CO

KS

IN

OK
NM

KY

AR

29 - 32%
26 - 29%
23 - 26%

TX

AL

NH

MA
CT RI

NJ

MD DE
VA

TN

MS
32 - 35%

PA

OH
WV

MO

CA

AZ

NY

IA

NE
UT

VT

MI

WY

NV

ME

WI

SD

ID

OR

NC
SC
GA

LA
FL

20 - 23%
17 - 20%
14 - 17%

Source: National Center for Chronic Disease Prevention and Health Promotion
http://hci.stanford.edu/jheer/files/zoo/ex/maps/choropleth.html

10

VIISUALIZATION

more dimensions to be visualized (e.g., symbol size, shape, and color). In addition to simple shapes
such as circles, graduated symbol maps may use more complicated glyphs such as pie charts. In
ﬁgure 3C, total circle size represents a state’s population, and each slice indicates the proportion of
people with a speciﬁc BMI rating.
CARTOGRAMS
A cartogram distorts the shape of geographic regions so that the area directly encodes a data variable.
A common example is to redraw every country in the world sizing it proportionally to population or
gross domestic product. Many types of cartograms have been created; in ﬁgure 3D we use the Dorling
cartogram, which represents each geographic region with a sized circle, placed so as to resemble the
true geographic conﬁguration. In this example, circular area encodes the total number of obese
people per state, and color encodes the percentage of the total population that is obese.

HIERARCHIES
While some data is simply a ﬂat collection of numbers, most can be organized into natural
hierarchies. Consider: spatial entities, such as counties, states, and countries; command structures
for businesses and governments; software packages and phylogenetic trees. Even for data with no
apparent hierarchy, statistical methods (e.g., k-means clustering) may be applied to organize data
empirically. Special visualization techniques exist to leverage hierarchical structure, allowing rapid
multiscale inferences: micro-observations of individual elements and macro-observations of large
groups.

Graduated Symbol Map of Obesity in the U.S., 2008

Normal

Overweight
Obese

Source: National Center for Chronic Disease Prevention and Health Promotion
http://hci.stanford.edu/jheer/files/zoo/ex/maps/symbol.html

11

VIISUALIZATION

Dorling Cartogram of Obesity in the U.S., 2008

32 - 35%

1M

10M

17 - 20%
14 - 17%

NC
AL
LA

TX

SC

TN
AR
NM

AZ

GA
MS

PA
VA
MO
OK

CA

CT
DE

MD
KY
KS
CO
NV

FL

100K
5M
29 - 32%
26 - 29%

23 - 26%
20 - 23%

NE

WV
UT

MA
VT

IA
WY

OR

MN

NJ

IL

RI

ID

IN

NH

OH
SD

ME

NY
MI
WI
ND

MT

WA

Source: National Center for Chronic Disease Prevention and Health Promotion
http://hci.stanford.edu/jheer/files/zoo/ex/maps/cartogram.html

Radial Node-link Diagram of the Flare Package Hierarchy

flare

vis

util

scale

query

physics

flex
display

data

animate

analytics

operator

legend

events

data

controls

axis

palette

math

heap

methods

converters

interpolate

graph

optimization

cluster

Visualization

Strings
Stats
Sort
Shapes
Property
Orientation
Maths
IValueProxy
IPredicate
IEvaluable
Geometry
Filter
Displays
Dates
Colors
Arrays

layout

filter

label

encoder

distortion

render

TimeScale
ScaleType
Scale
RootScale
QuantitativeScale
QuantileScale
OrdinalScale
LogScale
LinearScale
IScaleMap

Xor
Variance
Variable
Sum
StringUtil
Range
Query
Or
Not
Minimum
Maximum
Match
Literal
IsA
If
Fn
ExpressionIterator
Expression
Distinct
DateUtil
Count
CompositeExpression
Comparison
BinaryExpression
Average
Arithmetic
And
AggregateExpression
SpringForce
Spring
Simulation
Particle
NBodyForce
IForce
GravityForce
DragForce
FlareVis
TextSprite
RectSprite
LineSprite
DirtySprite

DataUtil
DataTable
DataSource
DataSet
DataSchema
DataField

Tween
Transitioner
TransitionEvent
Transition
Sequence
Scheduler
Pause
Parallel
ISchedulable
FunctionSequence
Easing

SortOperator
OperatorSwitch
OperatorSequence
OperatorList
Operator
IOperator

LegendRange
LegendItem
Legend

VisualizationEvent
TooltipEvent
SelectionEvent
DataEvent

TreeBuilder
Tree
ScaleBinding
NodeSprite
EdgeSprite
DataSprite
DataList
Data
TooltipControl
SelectionControl
PanZoomControl
IControl
HoverControl
ExpandControl
DragControl
ControlList
Control
ClickControl
AnchorControl

CartesianAxes
AxisLabel
AxisGridLine
Axis
Axes

SizePalette
ShapePalette
Palette
ColorPalette

SparseMatrix
IMatrix
DenseMatrix

HeapNode
FibonacciHeap

xor
where
variance
update
sum
sub
stddev
select
range
orderby
or
not
neq
mul
mod
min
max
lte
lt
isa
iff
gte
gt
fn
eq
div
distinct
count
average
and
add
_

JSONConverter
IDataConverter
GraphMLConverter
DelimitedTextConverter
Converters
RectangleInterpolator
PointInterpolator
ObjectInterpolator
NumberInterpolator
MatrixInterpolator
Interpolator
DateInterpolator
ColorInterpolator
ArrayInterpolator

AspectRatioBanker
SpanningTree
ShortestPaths
MaxFlowMinCut
LinkDistance
BetweennessCentrality
MergeEdge
HierarchicalCluster
CommunityStructure
AgglomerativeCluster

TreeMapLayout
StackedAreaLayout
RandomLayout
RadialTreeLayout
PieLayout
NodeLinkTreeLayout
Layout
IndentedTreeLayout
IcicleTreeLayout
ForceDirectedLayout
DendrogramLayout
CirclePackingLayout
CircleLayout
BundledEdgeRouter
AxisLayout
StackedAreaLabeler
RadialLabeler
Labeler
VisibilityFilter
GraphDistanceFilter
FisheyeTreeFilter

SizeEncoder
ShapeEncoder
PropertyEncoder
Encoder
ColorEncoder
FisheyeDistortion
Distortion
BifocalDistortion

ShapeRenderer
IRenderer
EdgeRenderer
ArrowType

Source: Flare Visualization Toolkit (http://flare.prefuse.org)
http://hci.stanford.edu/jheer/files/zoo/ex/hierarchies/tree.html

12

VIISUALIZATION

NODE-LINK DIAGRAMS
The word tree is used interchangeably with hierarchy, as the fractal branches of an oak might mirror
the nesting of data. If we take a two-dimensional blueprint of a tree, we have a popular choice for
visualizing hierarchies: a node-link diagram. Many different tree-layout algorithms have been
designed; the Reingold-Tilford algorithm, used in ﬁgure 4A on a package hierarchy of software
classes, produces a tidy result with minimal wasted space.
An alternative visualization scheme is the dendrogram (or cluster) algorithm, which places leaf

ta

da

flare

que

uti

l

ry

xor

Fi

AggregateExpression
And
Arithme
Averagetic
Binar
Com yExpress
Com parison ion
CounpositeEx
press
Da t
ion
Dis teUtil
Exptinct
Exp ressio
Fn ressio n
If
nIte
rato
Is
r
Lit A
Ma eral
M tch
Mi axim
No nim um
O t um
Q r
R ue
S a ry
Su trinnge
V
g
V a m U
Xo ari riab til
r an le
ce

e
_ d
ad nd eragt
a v n ct
a ou tin
c is
d
divq
e
fn t
g te
g
iff a
is
lt e
lt x
ma
min d
mo l
muq
ne
ds
tho
not
me
or erby
ord e
rangct
sele ev
stdd
sub
sum
update
variance
where

bo H
na ea
cc pN
iH od
e e
St
rin ap
St gs
a
PrSha Sor ts
Or o p
ien pe es t
IVa
t
M ati rty
IPrlueP athon
IEv edi rox s
ca y
Ge alua te
om ble
et
Dis Filtery
p
r
Dalays
tes
Colo
Arra rs
ys
Time
ScaleScale
Ty
Scape
le
Quantit RootScale
ative
Quantile Scale
Sca
OrdinalSc le
scale
ale
LogScale
LinearScale
IScaleMap

he

ap

or

at

TooltipControl
ol
SelectionContr l
ontro
ls
PanZoomC ontrol
contro
IC
ol
erContr ol
Hov Contr
nd ontrol
ExparagC
D ntrolListl
Co Contro l
ntro
kCo ol
axis
ClicorContr
h
es
Anc
nAx bel
tesia La e
te
Car AxisridLin is
let
G Axes
pa
Axis
Ax
h
n
at
tio
m
liza tte
ua
le te
Vis
Paalet tte
e
SizpePPalelette
a
a
rix
Sh lorP
at trix x
Co rseMMa atri
I
pa seM
S
n
De

r
or
to
at
ol or la
rp at po
te rpol ter
tIn e In
ec nt le
bj tI ng
a
O oincta
eld m
P e
R taFi che e
S t
Da ataaSe ource
D at aS abl
r
rte
D at aT til
D at U
nve
s Co r
D ata
ter Text verte
r
D
nve ted on r
CoelimihMLC erte er
D rap Conv vert
G ata Con
ID ON
JS
ite
Spr
s
Dirty Sprite
rter
Line tSprite
nve
ec prite
R xtS
co
Te
is
lay
FlareV
disp
ce
DragFor rce
flex
ravityFo
G
IForce orce
odyF
NB
Particle
physics
Simulation
Spring
SpringForce

er

op

ca D
lD is
Op O S
ist tor
er pe ort
ato ra Op orti tion
rS torS er on
Op e
a
er qu wi tor
O at en tch
IO perorLisce
Le
pe at t
g
r o
di
LeendR ator r
st
ge an
or
nd g
Vis
tio
Leg Iteme
uali
n
end
zat
Too ionE
Sele ltip ve
ctio Eve nt
nEv nt
Data e
leg
Eve nt
en
Sha
d
nt
peR
en
IRen derer
eve
Edge
d
nts
Rend erer
Arrow erer
Type
rende
TreeBui
r
lder
Tree
ScaleBind
ing
NodeSprite
EdgeSprite
data
vis
DataSprite
DataList
Data

cluster

fo

analytic

TreeMapLayout
StackedAreaLayout
RandomLayout
yout
RadialTreeLa
t
PieLayou t
ou
layout
kTreeLay ut
Layo ut
NodeLin
Layo
dTree yout
IndenteleTreeLa yout
Icic ectedLa yout
Dir
mLa ut
Force drogra gLayo ut
el
Den
ckin ayo r
lab
lePa CircleL outeut
eR o
Circ
Edg Lay
er
r
filt
dled Axis
ele r
r
Bun
Lab ele
de
rea ab ler
co
dA ialL be
en
cke Rad La ilter r
Sta
F e
lity ilt r
ibi ceF ilte
Visstan reeF der r
i T
co de r
hD ye
ap e
En co de r
Gr Fish
ze n o de r
Si peE nc co de
a
tyE n co ion
Sh er ErEn
rt
op
to
lo
Pr
is
eD
ey
sh

Fi

Co

Bi

AgglomerativeCluster
CommunitySt
Hierarchica ructure
MergeEdgelCluster
s
graph
Betwee
LinkD nnessCentra
optim
lity
MaxF istance
izati
Short lowMinC
on
Span estPath ut
an
ningT s
im
ree
ate
Asp
ectR
atioB
Ea
anke
Funsing
r
IS ct
P che ionS
Paaralledulabequen
in
le
ce
Sc use l
te
S he
rp
ol
T eq du
at
T ran uen ler
e
T ra siti ce
Twrannsitioon
s
n
A een ition Eve
er nt
C rr
D o ay
In atelorI Inte
n
M t
N at erp Inte terprpol
um rix ol rp o at
be Int ato ola lato or
rIn erp r tor r
te ol
rp ato
ol r
at
or

Cartesian Node-link Diagram of the Flare Package Hierarchy

Source: Flare Visualization Toolkit (http://flare.prefuse.org)
http://hci.stanford.edu/jheer/files/zoo/ex/hierarchies/cluster-radial.html

13

VIISUALIZATION

Indented Tree Layout of the Flare Package Hierarchy
flare
analytics
cluster
graph
optimization
animate
data
display
flex
physics
DragForce
GravityForce
IForce
NBodyForce
Particle
Simulation
Spring
SpringForce
query
scale
util
vis
Visualization
axis
controls
data
events
legend
operator
IOperator
Operator
OperatorList
OperatorSequence
OperatorSwitch
SortOperator
distortion
encoder
filter
label
layout
AxisLayout
BundledEdgeRouter
CircleLayout
CirclePackingLayout
DendrogramLayout
ForceDirectedLayout
IcicleTreeLayout
IndentedTreeLayout
Layout
NodeLinkTreeLayout
PieLayout
RadialTreeLayout
RandomLayout
StackedAreaLayout
TreeMapLayout

933KB
47KB
14KB
25KB
6KB
97KB
29KB
23KB
4KB
29KB
1KB
1KB
0KB
10KB
2KB
9KB
2KB
1KB
87KB
30KB
161KB
422KB
16KB
33KB
43KB
107KB
6KB
35KB
179KB
1KB
2KB
5KB
4KB
2KB
1KB
13KB
14KB
11KB
16KB
105KB
6KB
3KB
9KB
11KB
4KB
8KB
4KB
3KB
7KB
12KB
2KB
12KB
0KB
8KB
8KB

Source: Flare Visualization Toolkit (http://flare.prefuse.org)
http://hci.stanford.edu/jheer/files/zoo/ex/hierarchies/indent.html

14

VIISUALIZATION

nodes of the tree at the same level. Thus, in the diagram in ﬁgure 4B, the classes (orange leaf nodes)
are on the diameter of the circle, with the packages (blue internal nodes) inside. Using polar rather
than Cartesian coordinates has a pleasing aesthetic, while using space more efﬁciently.
We would be amiss to overlook the indented tree, used ubiquitously by operating systems to
represent ﬁle directories, among other applications (see ﬁgure 4C). Although the indented tree
requires excessive vertical space and does not facilitate multiscale inferences, it does allow efﬁcient
interactive exploration of the tree to ﬁnd a speciﬁc node. In addition, it allows rapid scanning of node
labels, and multivariate data such as ﬁle size can be displayed adjacent to the hierarchy.
ADJACENCY DIAGRAMS
The adjacency diagram is a space-ﬁlling variant of the node-link diagram; rather than drawing a link
between parent and child in the hierarchy, nodes are drawn as solid areas (either arcs or bars), and
their placement relative to adjacent nodes reveals their position in the hierarchy. The icicle layout in
ﬁgure 4D is similar to the ﬁrst node-link diagram in that the root node appears at the top, with child
nodes underneath. Because the nodes are now space-ﬁlling, however, we can use a length encoding
for the size of software classes and packages. This reveals an additional dimension that would be
difﬁcult to show in a node-link diagram.
The sunburst layout, shown in ﬁgure 4E, is equivalent to the icicle layout, but in polar
coordinates. Both are implemented using a partition layout, which can also generate a node-link
diagram. Similarly, the previous cluster layout can be used to generate a space-ﬁlling adjacency
diagram in either Cartesian or polar coordinates.

RadialTreeLayout
StackedAreaLayout
TreeMapLayout

NodeLinkTreeLayout

layout

operator
ForceDirectedLayout

CircleLayout
CirclePackingLayout

filter

label

encoder

Labeler

distortion

legend
Legend

LegendRange

TreeBuilder
render

ScaleBinding

DataList

DataSprite

NodeSprite

data

controls
Data

TooltipControl

Visualization

axis
Axis

heap
math
palette
FibonacciHeap

Strings

vis

util
Maths

Shapes

Geometry

Arrays
Colors
Dates
Displays

methods

scale

query
Query

physics
Simulation

NBodyForce

data

display
DirtySprite

interpolate

converters

Interpolator

GraphMLConverter

TextSprite

animate
Transitioner

Easing

Transition

graph

cluster

analytics

flare

Icicle Tree Layout of the Flare Package Hierarchy

Source: Flare Visualization Toolkit (http://flare.prefuse.org)
http://hci.stanford.edu/jheer/files/zoo/ex/hierarchies/icicle.html

15

VIISUALIZATION

ENCLOSURE DIAGRAMS
The enclosure diagram is also space ﬁlling, using containment rather than adjacency to represent
the hierarchy. Introduced by Ben Shneiderman in 1991, a treemap recursively subdivides area into
rectangles. As with adjacency diagrams, the size of any node in the tree is quickly revealed. The
example shown in ﬁgure 4F uses padding (in blue) to emphasize enclosure; an alternative saturation
encoding is sometimes used. Squariﬁed treemaps use approximately square rectangles, which offer
better readability and size estimation than a naive “slice-and-dice” subdivision. Fancier algorithms

Sunburst (Radial Space-filling) Layout of the Flare Package Hierarchy

TreeMapLayout

out

Layout

ted

ayou

reeL

reeLay

StackedArea

RadialT

LinkT

Node

irec

out

ceD

t
wMinC

ut

out

t

ut

ou

yo

La

ay

eL

ing

Lay

ck

rcl

Ci

Pa

cle

le

ut

r

MaxFlo

layo

be

Lay

For

Cir

La

r

sit

io

sit

Tr

Tr

Legen

d

e
at

legen

ta

d

da

lay

orce
NBodyF
Simulation

physics

flare

TreeBuilder

Gr

con
ite
Spr
Dirty
prite
extS
T

disp

vis

render

rs

er

ert

onv

LC

M
aph

te
ver

an

ge

im

Ran

te

ola

p
er

int

s
end

analytic

Leg

I

an

r

n

an

ato

tio

r

to

ola

rp

e
nt

ne

er

r

ion

Eas

ing

graph

cluster

de

op

tor

l

er

co

dis

be

la

filt

en

query

ding

ScaleBin

sc

data

Sprite

Node

ale

t

Strings

e

math
heap

palett

aliz
a

is
ax

FibonacciH

eap

is

s

Visu

Ma

Shape

l
ro
nt rol
Co nt
ltip nCo
o
To ctio
le
Se

tion

co
nt
ro

ta

Da

ds

ys
ra s
Ar lor
Co ates s
D lay
sp
y
Di
etr
om
Ge
ths

ls

Lis

ta
Da

Ax

Data

ry

tho

util

ite
Spr

Que

me

Source: Flare Visualization Toolkit (http://flare.prefuse.org)
http://hci.stanford.edu/jheer/files/zoo/ex/hierarchies/sunburst.html

16

VIISUALIZATION

such as Voronoi and jigsaw treemaps also exist but are less common.
By packing circles instead of subdividing rectangles, we can produce a different sort of enclosure
diagram that has an almost organic appearance. Although it does not use space as efﬁciently as a
treemap, the “wasted space” of the circle-packing layout, shown in ﬁgure 4G, effectively reveals the
hierarchy. At the same time, node sizes can be rapidly compared using area judgments.

NETWORKS
In addition to organization, one aspect of data that we may wish to explore through visualization is
relationship. For example, given a social network, who is friends with whom? Who are the central
players? What cliques exist? Who, if anyone, serves as a bridge between disparate groups? Abstractly,
a hierarchy is a specialized form of network: each node has exactly one link to its parent, while the
root node has no links. Thus node-link diagrams are also used to visualize networks, but the loss of
hierarchy means a different algorithm is required to position nodes.
Mathematicians use the formal term graph to describe a network. A central challenge in graph
visualization is computing an effective layout. Layout techniques typically seek to position closely

Treemap Layout of the Flare Package Hierarchy

Interpolator

PropertyEncoder
Encoder

Labeler
NodeLinkTreeLayout RadialTreeLayoutCirclePackingLayout

label

Strings

encoder

Shapes

Maths

MatrixInterpolator
interpolate
ArrayInterpolator
PointInterpolator Transitioner

SizeEncoder

ColorEncoder
RadialLabeler
StackedAreaLabeler
ShapeEncoder

CircleLayout

StackedAreaLayout ForceDirectedLayout
layout
operator

SparseMatrix

BifocalDistortion OperatorList

Geometry

Distortion
distortion
IcicleTreeLayout
DendrogramLayout

Layout

TreeMapLayout

Displays

FisheyeDistortion
OperatorSequence

OperatorSwitch
Operator
VisibilityFilter

IndentedTreeLayout

ColorInterpolator
ObjectInterpolator
DateInterpolator
RectangleInterpolator
NumberInterpolator

util

math IMatrix

FibonacciHeap
heap HeapNode

FisheyeTreeFilter
filter
BundledEdgeRouter RandomLayout
AxisLayout
GraphDistanceFilter
PieLayout
SortOperator
IOperator

Dates

Data

controls

DataList

ScaleBinding

Legend

legend

DataSprite

ShapeRenderer
EdgeRenderer
render

LegendRange LegendItem

ArrowType
IRenderer

Tree

EdgeSprite

Visualization

IValueProxy
FunctionSequence
Filter
Orientation

Palette

IPredicate
IEvaluable

AnchorControl
ExpandControl
IControl
DragControl Control

range iff

gte lte

HierarchicalCluster

mul lt div eq add
stddevvariance
xor
gt mod
methods
and or
update
sub isa distinctmin
orderby
average
fnwhere
max
count
neq not
select
sum _

MaxFlowMinCut
ShortestPaths

Query

graph

TimeScale QuantitativeScale

cluster

CommunityStructure
AgglomerativeCluster
analytics

BetweennessCentrality

axis

StringUtil

Comparison
query

Arithmetic

Axes CompositeExpression
BinaryExpression If

CartesianAxes
AxisGridLine
AxisLabel

DataEvent
TooltipEvent
events
SelectionEvent
VisualizationEvent

Not

SpanningTree

DateUtil

Match

IsA

Scale

LogScale
scale QuantileScale

MergeEdge
IScaleMap
RootScale

AspectRatioBanker
optimization

DelimitedTextConverter

OrdinalScale
ScaleType
LinearScale

NBodyForce

GraphMLConverter
converters
JSONConverter

Literal
Variable

Parallel

Sequence
ISchedulable
TransitionEvent
Pause

LinkDistance
Expression

Axis

Variance
ExpressionIterator

TreeBuilder

Sort

flare

SelectionControl HoverControl

NodeSprite data

Colors

Scheduler

Tween

Property

ShapePalette
SizePalette

Transition

Stats

ColorPalette

ControlList ClickControl
TooltipControl PanZoomControl

animate
Easing

palette

vis

Arrays

DenseMatrix

data Converters
IDataConverter

physics
Simulation

Or
DataSource DataSchema
Xor
Minimum
Maximum
AggregateExpression
GravityForce
Spring
Distinct
DataTable Particle
Fn
DataUtil DataField
Sum
Range And Average Count
DragForce
SpringForce IForce
DataSet

TextSprite

display
DirtySprite

RectSprite

LineSprite
FlareVis
flex

Source: Flare Visualization Toolkit (http://flare.prefuse.org)
http://hci.stanford.edu/jheer/files/zoo/ex/hierarchies/treemap.html

17

VIISUALIZATION

related nodes (in terms of graph distance, such as the number of links between nodes, or other
metrics) close in the drawing; critically, unrelated nodes must also be placed far enough apart
to differentiate relationships. Some techniques may seek to optimize other visual features—for
example, by minimizing the number of edge crossings.
FORCE-DIRECTED LAYOUTS
A common and intuitive approach to network layout is to model the graph as a physical system:

Nested Circles Layout of the Flare Package Hierarchy

flare
animate

util

interpolate
heap

query
math
methods
physics

display

palette

scale

vis

flex

analytics
graph
data
converters

operator
encoder

label

distortion

optimization

cluster

filter

layout

axis
legend

events
controls

data

render

Source: Flare Visualization Toolkit (http://flare.prefuse.org)
http://hci.stanford.edu/jheer/files/zoo/ex/hierarchies/pack.html

18

VIISUALIZATION

nodes are charged particles that repel each other, and links are dampened springs that pull
related nodes together. A physical simulation of these forces then determines the node positions;
approximation techniques that avoid computing all pairwise forces enable the layout of large
numbers of nodes. In addition, interactivity allows the user to direct the layout and jiggle nodes
to disambiguate links. Such a force-directed layout is a good starting point for understanding the
structure of a general undirected graph. In ﬁgure 5A we use a force-directed layout to view the
network of character co-occurrence in the chapters of Victor Hugo’s classic novel, Les Misérables.
Node colors depict cluster memberships computed by a community-detection algorithm.
ARC DIAGRAMS
An arc diagram, shown in ﬁgure 5B, uses a one-dimensional layout of nodes, with circular arcs to
represent links. Though an arc diagram may not convey the overall structure of the graph as effectively
as a two-dimensional layout, with a good ordering of nodes it is easy to identify cliques and bridges.
Further, as with the indented-tree layout, multivariate data can easily be displayed alongside nodes. The
problem of sorting the nodes in a manner that reveals underlying cluster structure is formally called
seriation and has diverse applications in visualization, statistics, and even archaeology.

Source: Knuth, D. E. 1993. The Stanford GraphBase: A Platform for Combinatorial Computing, Addison-Wesley.
http://hci.stanford.edu/jheer/files/zoo/ex/networks/force.html

19

VIISUALIZATION

MATRIX VIEWS
Mathematicians and computer scientists often think of a graph in terms of its adjacency matrix: each
value in row i and column j in the matrix corresponds to the link from node i to node j. Given this
representation, an obvious visualization then is: just show the matrix! Using color or saturation
instead of text allows values associated with the links to be perceived more rapidly.
The seriation problem applies just as much to the matrix view, shown in ﬁgure 5C, as to the arc
diagram, so the order of rows and columns is important: here we use the groupings generated by
a community-detection algorithm to order the display. While path following is harder in a matrix
view than in a node-link diagram, matrices have a number of compensating advantages. As networks
get large and highly connected, node-link diagrams often devolve into giant hairballs of line
crossings. In matrix views, however, line crossings are impossible, and with an effective sorting one
quickly can spot clusters and bridges. Allowing interactive grouping and reordering of the matrix
facilitates even deeper exploration of network structure.

CONCLUSION

Myriel
Napoleon
Mlle. Baptistine
Mme. Magloire
Countess de Lo
Geborand
Champtercier
Cravatte
Count
Old Man
Labarre
Valjean
Marguerite
Mme. de R
Isabeau
Gervais
Tholomyes
Listolier
Fameuil
Blacheville
Favourite
Dahlia
Zephine
Fantine
Mme. Thenardier
Thenardier
Cosette
Javert
Fauchelevent
Bamatabois
Perpetue
Simplice
Scaufflaire
Woman 1
Judge
Champmathieu
Brevet
Chenildieu
Cochepaille
Pontmercy
Boulatruelle
Eponine
Anzelma
Woman 2
Mother Innocent
Gribier
Jondrette
Mme. Burgon
Gavroche
Gillenormand
Magnon
Mlle. Gillenormand
Mme. Pontmercy
Mlle. Vaubois
Lt. Gillenormand
Marius
Baroness T
Mabeuf
Enjolras
Combeferre
Prouvaire
Feuilly
Courfeyrac
Bahorel
Bossuet
Joly
Grantaire
Mother Plutarch
Gueulemer
Babet
Claquesous
Montparnasse
Toussaint
Child 1
Child 2
Brujon
Mme. Hucheloup

We have arrived at the end of our tour and hope that the reader has found examples both intriguing
and practical. Though we have visited a number of visual encoding and interaction techniques,
many more species of visualization exist in the wild, and others await discovery. Emerging domains
such as bioinformatics and text visualization are driving researchers and designers to continually
formulate new and creative representations or ﬁnd more powerful ways to apply the classics. In
either case, the DNA underlying all visualizations remains the same: the principled mapping of data

Source: Knuth, D. E. 1993. The Stanford GraphBase: A Platform for Combinatorial Computing, Addison-Wesley.
http://hci.stanford.edu/jheer/files/zoo/ex/networks/arc.html

20

Child 1
Child 2
Mother Plutarch
Gavroche
Marius
Mabeuf
Enjolras
Combeferre
Prouvaire
Feuilly
Courfeyrac
Bahorel
Bossuet
Joly
Grantaire
Mme. Hucheloup
Jondrette
Mme. Burgon
Boulatruelle
Cosette
Woman 2
Gillenormand
Magnon
Mlle. Gillenormand
Mme. Pontmercy
Mlle. Vaubois
Lt. Gillenormand
Baroness T
Toussaint
Mme. Thenardier
Thenardier
Javert
Pontmercy
Eponine
Anzelma
Gueulemer
Babet
Claquesous
Montparnasse
Brujon
Marguerite
Tholomyes
Listolier
Fameuil
Blacheville
Favourite
Dahlia
Zephine
Fantine
Perpetue
Labarre
Valjean
Mme. de R
Isabeau
Gervais
Bamatabois
Simplice
Scaufflaire
Woman 1
Judge
Champmathieu
Brevet
Chenildieu
Cochepaille
Myriel
Napoleon
Mlle. Baptistine
Mme. Magloire
Countess de Lo
Geborand
Champtercier
Cravatte
Count
Old Man
Fauchelevent
Mother Innocent
Gribier

VIISUALIZATION

Child 1
Child 2
Mother Plutarch
Gavroche
Marius
Mabeuf
Enjolras
Combeferre
Prouvaire
Feuilly
Courfeyrac
Bahorel
Bossuet
Joly
Grantaire
Mme. Hucheloup
Jondrette
Mme. Burgon
Boulatruelle
Cosette
Woman 2
Gillenormand
Magnon
Mlle. Gillenormand
Mme. Pontmercy
Mlle. Vaubois
Lt. Gillenormand
Baroness T
Toussaint
Mme. Thenardier
Thenardier
Javert
Pontmercy
Eponine
Anzelma
Gueulemer
Babet
Claquesous
Montparnasse
Brujon
Marguerite
Tholomyes
Listolier
Fameuil
Blacheville
Favourite
Dahlia
Zephine
Fantine
Perpetue
Labarre
Valjean
Mme. de R
Isabeau
Gervais
Bamatabois
Simplice
Scaufflaire
Woman 1
Judge
Champmathieu
Brevet
Chenildieu
Cochepaille
Myriel
Napoleon
Mlle. Baptistine
Mme. Magloire
Countess de Lo
Geborand
Champtercier
Cravatte
Count
Old Man
Fauchelevent
Mother Innocent
Gribier

Source: Knuth, D. E. 1993. The Stanford GraphBase: A Platform for Combinatorial Computing, Addison-Wesley.
http://hci.stanford.edu/jheer/files/zoo/ex/networks/matrix.html

variables to visual features such as position, size, shape, and color. As you leave the zoo and head
back into the wild, try deconstructing the various visualizations crossing your path. Perhaps you can
design a more effective display? Q
ADDITIONAL RESOURCES
Few, S. 2009. Now I See It: Simple Visualization Techniques for Quantitative Analysis. Analytics Press.
Tufte, E. 1983. The Visual Display of Quantitative Information. Graphics Press.

21

VIISUALIZATION

Tufte, E. 1990. Envisioning Information. Graphics Press.
Ware, C. 2008. Visual Thinking for Design. Morgan Kaufmann.
Wilkinson, L. 1999. The Grammar of Graphics. Springer.
VISUALIZATION DEVELOPMENT TOOLS
Prefuse (http://prefuse.org/): Java API for information visualization.
Prefuse Flare (http://ﬂare.prefuse.org/): ActionScript 3 library for data visualization in the Adobe
Flash Player.
Processing (http://processing.org/): Popular language and IDE for graphics and interaction.
Protovis (http://vis.stanford.edu/protovis/): JavaScript tool for Web-based visualization.
The Visualization Toolkit (http://vtk.org/): Library for 3D and scientiﬁc visualization.
LOVE IT, HATE IT? LET US KNOW
feedback@queue.acm.org
JEFFREY HEER is an assistant professor of computer science at Stanford University, where he works
on human-computer interaction, visualization, and social computing. His research investigates the
perceptual, cognitive, and social factors involved in making sense of large data collections, resulting
in new interactive systems for visual analysis and communication. He has also led the design of the
Prefuse, Flare, and Protovis visualization toolkits, in use by researchers, corporations, and thousands of
data enthusiasts. Heer is the recipient of the 2009 ACM CHI Best Paper Award and Faculty Awards from
IBM and Intel. In 2009 he was named to MIT Technology Review’s TR35. He holds B.S., M.S., and Ph.D.
degrees in Computer Science from the University of California, Berkeley.
MICHAEL BOSTOCK received the BSE degree in computer science in 2000 from Princeton University. He
is currently a Ph.D. student in the Department of Computer Science at Stanford University. His research
interests include information visualization and software design. Before joining Stanford, he was a staff
engineer at Google, where he developed search quality evaluation methodologies, experimental search
user interfaces, and reusable software components such as the Google Collections Library. He is currently
working on the Protovis visualization toolkit.
VADIM OGIEVETSKY is a Masters student at Stanford University specializing in Human-Computer
Interaction. He is a core contributor to Protovis, an open-source web-based visualization toolkit.
Ogievetsky received a First Class BA degree in Mathematics and Computer Science from the University of
Oxford where he specialized in linear algebra and programming languages. In addition to visualization,
his interests include massively parallel computing and computer controlled manufacturing processes.
© 2010 ACM 1542-7730/10/0500 $10.00

22

